openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: Development server
    url: http://127.0.0.1:3000/
  - description: SwaggerHub API Auto Mocking
    # url: https://virtserver.swaggerhub.com/bgurecipeweb/Recipe_API/1.0.0


info:
    description: |
      API for managing and searching recipes, with user authentication and recipe management.
      ## Frontend-Backend Responsibilities Split according to the PRD requirements:
      
      ### Backend (Node.js/Express) Responsibilities:
      - User authentication with session cookies
      - Password hashing and secure storage
      - Data validation and storage in MySQL database
      - Integration with Spoonacular API for recipe search
      - Tracking user activities (favorites, viewed recipes)
      - Managing recipe collections (user recipes, family recipes)
      - Processing search queries with proper filtering
      - Ensuring data security and validation
      
      ### Frontend (Vue.js) Responsibilities:
      - Implementing the user interface components
      - Form rendering and client-side validation
      - Navigation and routing between pages
      - Displaying recipe cards and details
      - Managing local UI state and user session
      - Making API calls to the backend
      - Providing visual feedback for user actions
      - Implementing responsive design
      
      
    version: "1.0.0"
    title: Recipe API
    contact:
      email: noapatch@post.bgu.ac.il
    license:
      name: Apache 2.0
      url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  
tags:
  - name: User
    description: All you need for the user
  - name: Recipe
    description: All you need for the recipe
  - name: Auth
    description: Authenticate the user
    
    
paths:
  # Authorization Operations
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
                    example: sessionId=abc123xyz
                example:
                  username: noapatch
        '401':
          description: Username or Password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                      
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout current user
      responses:
        '200':
          description: Successfully logged out
          
          
  # User Operations
  /users/my_favorites:
    get:
      tags: [User]
      summary: Get user's favorite recipes
      responses:
        '200':
          description: List of favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags: [User]
      summary: Add a recipe to the user's favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipeId
              properties:
                recipeId:
                  type: integer
                  format: int64
                  example: 123
      responses:
        '200':
          description: Favorite status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorited:
                    type: boolean
        '401':
          description: Unauthorized â€“ user not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

                
  /users/my_recipes:
    get:
      tags: [User]
      summary: Get user's own recipes
      responses:
        '200':
          description: List of user's created recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [User]
      summary: Create a new recipe
      description: Add a new recipe to the database. Can be a regular recipe or family recipe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Recipe'
                - type: object
                  properties:
                    isFamily:
                      type: boolean
                      description: Set to true to mark this as a family recipe
                      default: false
                    familyMember:
                      type: string
                      description: Name of the family member who provided the recipe (required if isFamily is true)
                    occasion:
                      type: string
                      description: When this dish is typically prepared in the family
      responses:
        '201':
          description: Recipe created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid input (e.g., family recipe without familyMember)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
                
  /user/{recipeid}/viewed:
    post:
      tags: [User]
      summary: Mark a recipe as viewed
      parameters:
        - name: recipeid
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Recipe marked as viewed
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    type: integer
                    format: int64
                  viewed:
                    type: boolean
                    default: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

               
  /users/my-last-searches:
    get:
      tags: [User]
      summary: Get user's last searches
      responses:
        '200':
          description: List of user's last searches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /users/my-last-watched:
    get:
      tags: [User]
      summary: Get user's last watched recipes
      responses:
        '200':
          description: List of user's last watched recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'
                maxItems: 3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /users/my_family:
    get:
      tags: [User]
      summary: Get user's family recipes
      responses:
        '200':
          description: List of family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'     

    

  /recipes:
    get:
      tags: [Recipe]
      summary: Get recipes based on search criteria
      description: Retrieve recipes with pagination (5, 10, or 15 results)
      parameters:
        - name: limit
          in: query
          description: Number of recipes to return (5, 10, or 15)
          schema:
            type: integer
            enum: [5, 10, 15]
            default: 5
        - name: query
          in: query
          description: Search term for recipe title
          required: true
          schema:
            type: string
        - name: cuisine
          in: query
          description: Filter by cuisine type
          schema:
            type: string
        - name: diet
          in: query
          description: Filter by diet type
          schema:
            type: string
        - name: intolerances
          in: query
          description: Filter by food intolerances
          schema:
            type: string
        - name: sortBy
          in: query
          description: Field to sort results by
          schema:
            type: string
            enum: [readyInMinutes, popularity]
            default: popularity
        - name: sortDirection
          in: query
          description: Direction of sort
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of recipes matching the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'
        '404':
          description: No recipes found matching the criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

                
        
  
  /recipes/random:
    get:
      tags: [Recipe]
      summary: Get random recipes
      description: Retrieve a specified number of random recipes for exploration
      parameters:
        - name: count
          in: query
          description: Number of random recipes to return
          required: false
          schema:
            type: integer
            default: 3
      responses:
        '200':
          description: List of random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeOverview'

  /recipes/{recipeid}:
    get:
      tags: [Recipe]
      summary: Get a specific recipe by ID
      parameters:
        - name: recipeid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
  /recipes/{recipeid}/like:
    put:
      tags: [Recipe]
      summary: Like a recipe
      description: Increase the popularity count (likes) of a recipe
      parameters:
        - name: recipeid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Recipe liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    type: integer
                    format: int64
                  liked:
                    type: boolean
                    default: true
                  popularity:
                    type: integer
                    description: Updated number of likes
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'        
          
          
               
components:
  schemas:
    User:
      type: object
      required:
        - username
        - firstName
        - lastName
        - country
        - password
        - email
        - profileImage
      properties:
        username:
          type: string
          description: Username (3-8 characters, letters only) - Must be unique across all users
          minLength: 3
          maxLength: 8
          pattern: '^[a-zA-Z]+$'
          x-unique: true
          example: noapatch
        firstName:
          type: string
          example: Noa
        lastName:
          type: string
          example: Patchornik
        country:
          type: string
          description: Getting the country with external API- https://restcountries.com/v3.1/all
          example: Israel
        password:
          type: string
          format: password
          description: >
            Password requirements:
            - Length: 5-10 characters
            - Must contain at least 1 number (0-9)
            - Must contain at least 1 special character (!@#$%^&*(),.?":{}|<>)
          minLength: 5
          maxLength: 10
          x-pattern-description: "Must contain at least one number and one special character"
          pattern: '^(?=.*[0-9])(?=.*[!@#$%^&*(),.?":{}|<>])(.{5,10})$'
          example: 1234i! 
        email:
          type: string
          format: email
        profileImage:
          type: string
          format: url
          description: URL to the user's profile image
          example: https://example.com/profile.jpg
          
          
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: noapatch
        password:
          type: string
          format: password
          example: 1234i!
        
          
    RecipeOverview:
      type: object
      required:
        - title
        - image
        - readyInMinutes
      properties:
        title:
          type: string
          example: pasta with white souce
        image:
          type: string
          format: url
          example: https://example.com/White-Pasta.png
        readyInMinutes:
          type: integer
          minimum: 0
          example: 20
        popularity:
          type: integer
          description: Number of likes
          minimum: 0
          example: 5
        isVegan:
          type: boolean
          default: false
        isVegeterian:
          type: boolean
          default: false
        isGlutenFree:
          type: boolean
          default: false
          
    Recipe:
      type: object
      required:
        - id
        - title
        - ingredients
        - instructions
        - servings
      properties:
        id:
          type: string
          example: '123ID'
        overview:
          $ref: '#/components/schemas/RecipeOverview'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            type: string
            example: put 1 spoon of salt
        servings:
          type: integer
          minimum: 1
          example: 20
        createdBy:
          type: string
          description: Username of the creator (automatically set by the server)
          example: Noa Patchornik
        isFamily:
          type: boolean
          description: Whether this is a family recipe
          default: false
        familyMember:
          type: string
          description: Name of the family member who provided the recipe
          example: Yehodit Patchornik
        occasion:
          type: string
          description: When this dish is typically prepared in the family
          example: birthdays
    
    
    RecipeUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        overview:
          $ref: '#/components/schemas/RecipeOverview'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            type: string
            example: put 1 spoon of salt
        servings:
          type: integer
          minimum: 1
          example: 20
        createdBy:
          type: string
          description: Username of the creator (automatically set by the server)
          example: Noa Patchornik
        isFamily:
          type: boolean
          description: Whether this is a family recipe
          default: false
        familyMember:
          type: string
          description: Name of the family member who provided the recipe
          example: Yehodit Patchornik
        occasion:
          type: string
          description: When this dish is typically prepared in the family
          example: birthdays  
    
        
    Ingredient:
      type: object
      required:
        - name
        - amount
        - unit
      properties:
        name:
          type: string
          example: salt
        amount:
          type: number
          format: float
          minimum: 0
          example: 1
        unit:
          type: string
          example: spoon
          
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: Recipe not found